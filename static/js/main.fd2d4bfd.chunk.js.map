{"version":3,"sources":["components/SearchInput/SearchInput.tsx","views/Home/Home.tsx","utils/api.js","components/Card/Card.tsx","views/UserDetails/UserDetails.tsx","views/NotFoundPage/NotFoundPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["SearchInput","props","useState","value","setValue","onSearch","className","style","width","type","name","placeholder","label","onChange","event","target","onKeyPress","e","key","onClick","icon","faSearch","Home","history","useHistory","faRocket","trim","push","axios","create","baseURL","responseType","Card","href","link","title","description","footer","map","data","UserDetails","USER_REPOS","USER_ERROR","REPOS_ERROR","repoTypes","selectedRepo","setSelectedRepo","userName","useParams","user","setUser","cards","setCards","userError","setUserError","reposError","setReposError","loadingType","useEffect","startUserConfig","startRepoConfig","a","getUserByName","repoType","getReposByUserName","getStarredReposByUserName","repos","repo","clone_url","getFormattedDate","updated_at","faClock","forks","toString","faCodeBranch","rawDate","formattedDate","Date","toISOString","split","replaceAll","Promise","resolve","reject","get","then","response","error","length","onRepoTypeChange","src","avatar_url","login","email","followers","bio","i","Fragment","card","faTimes","NotFoundPage","App","exact","path","component","to","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fd2d4bfd.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport './SearchInput.css'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faSearch } from '@fortawesome/free-solid-svg-icons'\r\n\r\nfunction SearchInput(props:SearchInputProps){\r\n    const [value, setValue] = useState('')\r\n\r\n    const onSearch = () => {\r\n        props.onSearch(value)\r\n    }\r\n\r\n    const onInputChange = (event:React.ChangeEvent<HTMLInputElement>) => {\r\n        setValue(event.target.value)\r\n    }\r\n\r\n    const handleKeyPress = (event:React.KeyboardEvent) => {\r\n        if(event.key === 'Enter'){\r\n            onSearch()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"search-bar d-flex\" style={{width:props.width}}>\r\n            <input type=\"text\" className=\"search-bar__input p-10\" name=\"search\" placeholder={props.label} value={value} onChange={onInputChange} onKeyPress = {(e) => {handleKeyPress(e)}}></input>\r\n            <button className=\"search-bar__button button button--primary p-10\" onClick = {onSearch}>\r\n                <FontAwesomeIcon className=\"search-bar__icon\" icon={faSearch}></FontAwesomeIcon>\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport interface SearchInputProps{\r\n    label:string,\r\n    onSearch:Function,\r\n    width:string\r\n}\r\n\r\nexport default SearchInput","import './Home.css'\r\nimport SearchInput from '../../components/SearchInput/SearchInput'\r\nimport { useHistory } from 'react-router-dom';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faRocket } from '@fortawesome/free-solid-svg-icons'\r\nfunction Home(){\r\n    const history = useHistory()\r\n    const onSearch = (value:string) => {\r\n        if(value && value.trim()){\r\n            history.push(`/user/${value}`)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <section className=\"container bg-primary text-primary d-flex col a-center j-center\">\r\n            <FontAwesomeIcon icon={faRocket} className=\"icon mb-10\"></FontAwesomeIcon>\r\n            <SearchInput label=\"Search user\" onSearch={onSearch} width=\"50%\"></SearchInput>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default Home","import axios from \"axios\"\r\n\r\nexport default axios.create({\r\n  baseURL: \"https://api.github.com/users/\",\r\n  responseType: \"json\"\r\n})","import './Card.css'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nfunction Card(props:CardProps){\r\n    return (\r\n        <div className=\"card text-primary\">\r\n            <div className=\"card__main-content\">\r\n                <h1 className=\"card__header\">\r\n                    <a href={props.link} target=\"blank\">{props.title}</a>\r\n                </h1>\r\n                <p className=\"card__description\">{props.description}</p>\r\n            </div>\r\n            <div className=\"card__footer\">\r\n                {\r\n                    props.footer.map((data) => {\r\n                        return <h5 className=\"card__footer-content\">\r\n                                    <FontAwesomeIcon icon={data.icon} className=\"card__footer-content__icon\"></FontAwesomeIcon>\r\n                                    {data.label}\r\n                                </h5>\r\n                    })\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport interface CardProps{\r\n    title:string,\r\n    description:string\r\n    link:string,\r\n    footer:Array<{icon:any, label:string}>\r\n}\r\n\r\nexport default Card","import React, { useEffect, useState } from \"react\"\r\nimport { useParams } from \"react-router\"\r\nimport axios from '../../utils/api'\r\nimport ReactLoading from 'react-loading';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faTimes, faCodeBranch, faClock} from '@fortawesome/free-solid-svg-icons'\r\nimport Card, {CardProps} from \"../../components/Card/Card\"\r\nimport './UserDetails.css'\r\nfunction UserDetails(){\r\n    const STARRED_REPOS = 'starred repos'\r\n    const USER_REPOS = 'user repos'\r\n    const USER_ERROR = 'User Not Found'\r\n    const REPOS_ERROR = 'Empty'\r\n    const repoTypes:Array<string> = [USER_REPOS, STARRED_REPOS]\r\n    const [selectedRepo, setSelectedRepo] = useState(USER_REPOS)\r\n    const {userName} = useParams<{userName:string}>()\r\n    const [user, setUser] = useState<User>()\r\n    const [cards, setCards] = useState<Array<CardProps>>([])\r\n    const [userError, setUserError] = useState('')\r\n    const [reposError, setReposError] = useState('')\r\n    const loadingType = 'bubbles'\r\n\r\n    useEffect(() => {\r\n        startUserConfig(userName)\r\n        startRepoConfig(userName, selectedRepo)\r\n    },[])\r\n\r\n    const startUserConfig = async (userName:string) => {\r\n        try{\r\n            const user = await getUserByName(userName)\r\n            setUser(user)\r\n        }\r\n        catch(error){\r\n            setUserError(error)\r\n        }\r\n    }\r\n\r\n    const startRepoConfig = async (userName:string, repoType:string) => {\r\n        setCards([])\r\n        try{\r\n            const repos:Array<Repo> = repoType === USER_REPOS ? await getReposByUserName(userName) : await getStarredReposByUserName(userName)\r\n            const cards:Array<CardProps> = repos.map((repo) => {\r\n                return {\r\n                    title: repo.name,\r\n                    description: repo.description,\r\n                    link: repo.clone_url,\r\n                    footer:[\r\n                        {label:getFormattedDate(repo.updated_at), icon:faClock},\r\n                        {label:repo.forks.toString(), icon:faCodeBranch}\r\n                    ]\r\n                }\r\n            })\r\n            setCards([...cards])\r\n        }\r\n        catch(error){\r\n            setReposError(error)\r\n        }\r\n    }\r\n\r\n    const getFormattedDate = (rawDate:string):string => {\r\n        const date = new Date(rawDate)\r\n        let formattedDate = date.toISOString()\r\n        formattedDate = formattedDate.split('T')[0].replaceAll('-','/')\r\n        return formattedDate\r\n    }\r\n\r\n    const getUserByName = (userName:string):Promise<User> => {\r\n        return new Promise((resolve, reject) =>  {\r\n            axios.get(userName)\r\n            .then(\r\n                (response) => {\r\n                    response.data ? resolve(response.data) : reject(USER_ERROR)\r\n                },\r\n                (error) => {\r\n                    reject(USER_ERROR)\r\n                }\r\n            )\r\n        })\r\n    }\r\n\r\n    const getReposByUserName = (userName:string):Promise<Array<Repo>> => {\r\n        return new Promise((resolve, reject) =>  {\r\n            axios.get(`${userName}/repos`)\r\n            .then(\r\n                (response) => {\r\n                    response.data && response.data.length ? resolve(response.data) : reject(REPOS_ERROR)\r\n                },\r\n                (error) => {\r\n                    reject(REPOS_ERROR)\r\n                }\r\n            )\r\n        })\r\n    }\r\n\r\n    const getStarredReposByUserName = (userName:string):Promise<Array<Repo>> => {\r\n        return new Promise((resolve, reject) =>  {\r\n            axios.get(`${userName}/starred`)\r\n            .then(\r\n                (response) => {\r\n                    response.data && response.data.length > 0 ? resolve(response.data) : reject(REPOS_ERROR)\r\n                },\r\n                (error) => {\r\n                    reject(REPOS_ERROR)\r\n                }\r\n            )\r\n        })\r\n    }\r\n\r\n    const onRepoTypeChange = async (event:React.ChangeEvent<HTMLSelectElement>) => {\r\n        setSelectedRepo(event.target.value)\r\n        startRepoConfig(userName, event.target.value)        \r\n    }\r\n\r\n    return user ? \r\n    (\r\n        <section className=\"container bg-primary text-primary d-flex col p-20\"> \r\n            <div className=\"user-details\">\r\n                <figure className=\"user-details__avatar\">\r\n                    <img src={user.avatar_url}></img>\r\n                </figure>\r\n                <div className=\"user-details__text-container\">\r\n                    <h2 className=\"user-details__title\">Name: {user.login}</h2>\r\n                    {user.email ? <h4 className=\"user-details__title\">Email: {user.email}</h4> : ''}\r\n                    {user.followers ? <h4 className=\"user-details__title\">Fallowers: {user.followers}</h4> : ''}\r\n                    {user.bio ? <p className=\"user-details__description\">{user.bio}</p> : ''}\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <select className=\"select-input mt-20\" value={selectedRepo} onChange={(e) => {onRepoTypeChange(e)}}>\r\n                    {\r\n                        repoTypes.map((repoType, i) => {\r\n                            return <option key={i}  className=\"select-input__option\" value={repoType}>{repoType}</option>\r\n                        })\r\n                    }\r\n                </select>\r\n                {\r\n                    cards.length > 0 \r\n                    ?\r\n                    <React.Fragment>\r\n                        {\r\n                            cards.map((card, i) => {\r\n                                return <Card {...card}></Card>\r\n                            })\r\n                        }\r\n                    </React.Fragment>\r\n                    :\r\n                    <div className=\"d-flex a-center j-center mt-10\">\r\n                        {\r\n                            reposError \r\n                            ?\r\n                            <h5>{reposError}</h5>\r\n                            :\r\n                            <ReactLoading type={loadingType}></ReactLoading>\r\n                        }\r\n                    </div>\r\n                }\r\n            </div>\r\n        </section>\r\n    )\r\n    :\r\n    (\r\n        <div className=\"container d-flex col a-center j-center bg-primary text-primary\">\r\n            {\r\n                userError \r\n                ?\r\n                <React.Fragment>\r\n                    <FontAwesomeIcon icon={faTimes} className=\"icon\"/>\r\n                    <h1>{userError}</h1>\r\n                </React.Fragment>\r\n                :\r\n                <ReactLoading type={loadingType}></ReactLoading>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\ninterface User {\r\n    login:string,\r\n    avatar_url:string,\r\n    email:string,\r\n    bio:string,\r\n    followers:number\r\n}\r\n\r\ninterface Repo{\r\n    name:string\r\n    description: string,\r\n    updated_at:string,\r\n    clone_url:string,\r\n    forks:number,\r\n    private:boolean\r\n}\r\n\r\n\r\nexport default UserDetails","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faTimes } from '@fortawesome/free-solid-svg-icons'\r\n\r\nfunction NotFoundPage(){\r\n    return (\r\n        <div className=\"bg-primary container d-flex col a-center j-center text-primary\">\r\n            <FontAwesomeIcon icon={faTimes} className=\"icon\"></FontAwesomeIcon>\r\n            <h1>404</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NotFoundPage","import {\r\n  HashRouter as Router,\r\n  Redirect,\r\n  Switch,\r\n  Route\r\n} from \"react-router-dom\"\r\nimport './styles/utils.css'\r\nimport './styles/theme.css'\r\nimport './styles/blocks.css'\r\nimport Home from './views/Home/Home'\r\nimport UserDetails from './views/UserDetails/UserDetails'\r\nimport NotFoundPage from './views/NotFoundPage/NotFoundPage'\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <Switch>\r\n        <Route exact path='/'>\r\n          <Home></Home>\r\n        </Route>\r\n        <Route exact path='/user/:userName'>\r\n          <UserDetails></UserDetails>\r\n        </Route>\r\n        <Route path=\"/404\" component={NotFoundPage} />\r\n        <Redirect to=\"/404\"/>\r\n      </Switch>\r\n    </Router>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}